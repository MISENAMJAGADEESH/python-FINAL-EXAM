# -*- coding: utf-8 -*-
"""LVADSUSR90_jagadeesh_IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F6iZNRNQu7wZMEg2moIDD5E1ONl_A_sO
"""

#1
import numpy as np
def rgb_to_gray(rgb_image):
    gray_image = np.dot(rgb_image[..., :3], [0.2989, 0.5870, 0.1140]).astype(np.uint8)
    return gray_image
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],[[127,127,127],[200,200,200],[50,50,50]]])
gray_image = rgb_to_gray(rgb_image)
print("Grayscale image:")
print(gray_image)

#2
import numpy as np
arr = np.array([[170, 50, 20],
                [175, 45, 36],
                [177, 48, 29]])
arr1 = np.mean(arr)
arr2 = np.std(arr)
print(arr1)
print(arr2)

#3
import numpy as np
sensor1_data = np.random.rand(1, 2, 3)  # Example data shape: (3, 4, 5)
sensor2_data = np.random.rand(4, 5, 6)
sensor3_data = np.random.rand(7, 8, 9)
sensor1_flat = sensor1_data.flatten()
sensor2_flat = sensor2_data.flatten()
sensor3_flat = sensor3_data.flatten()
concatenated_array = np.concatenate((sensor1_flat, sensor2_flat, sensor3_flat))
result = concatenated_array.reshape(1, -1)
print("Original data shape:")
print("Sensor 1:", sensor1_data.shape)
print("Sensor 2:", sensor2_data.shape)
print("Sensor 3:", sensor3_data.shape)
print("\nFlattened data shapes:")
print("Sensor 1:", sensor1_flat.shape)
print("Sensor 2:", sensor2_flat.shape)
print("Sensor 3:", sensor3_flat.shape)
print("\nConcatenated array shape:", concatenated_array.shape)
print("\nReshaped result shape:", result.shape)
print("\nReshaped result:")
print(result)

#4
import numpy as np
athlete_data = np.array([['A', 'B', 'C', 'D', 'F'], [10, 11, 12, 9, 11]])
athlete_data = athlete_data.transpose()
athlete_data[:, 1] = athlete_data[:, 1].astype(int)
improvement = athlete_data[:, 1][-1] - athlete_data[:, 1][0]
print("Improvement:", improvement)

#5
import numpy as np
student_marks = np.array([
    [90,-1, 65, 85, 60, 55],
    [90,-1, 45, 95, 70, 65],
    [70,-1, 65, 65, 90, 75]
]) # few students exempt with a score of -1
last_three_subjects = student_marks[:, -3:]
average_last_three = np.mean(last_three_subjects, axis=1)
print("Average of the last three subjects for each student:")
print(average_last_three)

#6
import numpy as mp
#all the temp are in C
temp_cities = np.array ([
    [30,33,32,32,41],
    [44,34,32,45,20],
    [43,46,54,33,10]
 ])
#because of adjustment factor temp has been increased to 2.11 c
adjustment_factor = np.array([2.11])
new_temp = temp_cities + adjustment_factor
#there the new temp are listed below
print(new_temp)

#7
data = {
    'Name':['Alice','Bob','Charlie','David','Eve','Frank','Grace'],
    'Age':[25,30,35,40,45,50,55],
    'City':['New York','Los Angeles','Chicago','Houston','Phoenix','Miami','Boston'],
    'Department':['HR','IT','Finace','Marketing','Sales','IT','HR'],
}
df = pd.DataFrame(data)
employee = df[(df['Age']<45)&(df['Department'] != 'HR')]
print(employee[['Name','City']])

#8
df = pd.DataFrame({
    'product':['apples','bananas','cherries','dates','elderberries','Flour','grapes'],
    'category':['fruit','fruit','fruit','fruit','fruit','bakery','fruit'],
    'price':[1.20,0.50,3.00,2.50,4.00,1.50,2.00],
    'promotion':[True,False,True,True,False,True,False]
})

average = df[df['category'] == 'fruit']['price'].mean()
potential_candidates = df[(df['category'] == 'fruit') &
                          (df['price'] >= average * 0.9) &
                          (df['price'] <= average * 1.1) &
                          (~df['promotion'])]

print(potential_candidates)

#9
import pandas as pd
employee_df=pd.DataFrame({
    'Employee':['Alice','Bob','Charlie','David'],
    'Department':['HR','IT','Finace','IT'],
    'Manager':['John','Rachel','Emily','Rachel']
})
project_df=pd.DataFrame({
    'Employee':['Alice','Charlie','Eve'],
    'Project':['P1','P2','P3']
})
merge = pd.merge(employee_df,project_df,on='Employee',how='left')
departments = merge['Department'].unique()
unassigned_df = pd.DataFrame(columns=['Employee', 'Project', 'Department', 'Manager'])
for dept in departments:
    dept_df = merge[merge['Department'] == dept]
    unassigned_employees = employee_df[~employee_df['Employee'].isin(dept_df['Employee'])]
    unassigned_employees['Project'] = None
    unassigned_employees['Department'] = dept
    unassigned_employees['Manager'] = employee_df.loc[employee_df['Department'] == dept, 'Manager'].iloc[0]

    unassigned_df = unassigned_df.append(unassigned_employees, ignore_index=True)
complete_df = pd.concat([merge, unassigned_df])
print(complete_df)

#10
import pandas as pd
data = pd.DataFrame({
    'Department':['Electronics','Clothing','Clothing','Home','Goods'],
    'Salesperson':['Alice','Bob','Charlie','David','Eve'],
    'Sales':[70000,50000,30000,40000,60000]
})
avgsales = data.groupby('Department')['Sales'].mean()
sorted = avgsales.sort_values(ascending=False)
print(sorted)